//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FromDatabase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SampleSqlEntities : DbContext
    {
        public SampleSqlEntities()
            : base("name=SampleSqlEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
    
        public virtual int DeleteCustomer(Nullable<int> c_id)
        {
            var c_idParameter = c_id.HasValue ?
                new ObjectParameter("c_id", c_id) :
                new ObjectParameter("c_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomer", c_idParameter);
        }
    
        public virtual int InsertCustomer(string first_name, string last_name, string email, string address, string city)
        {
            var first_nameParameter = first_name != null ?
                new ObjectParameter("first_name", first_name) :
                new ObjectParameter("first_name", typeof(string));
    
            var last_nameParameter = last_name != null ?
                new ObjectParameter("last_name", last_name) :
                new ObjectParameter("last_name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomer", first_nameParameter, last_nameParameter, emailParameter, addressParameter, cityParameter);
        }
    
        public virtual ObjectResult<PrintCustomer_Result> PrintCustomer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrintCustomer_Result>("PrintCustomer");
        }
    
        public virtual int UpdateCustomer(Nullable<int> c_id, string first_name, string last_name, string email, string address, string city)
        {
            var c_idParameter = c_id.HasValue ?
                new ObjectParameter("c_id", c_id) :
                new ObjectParameter("c_id", typeof(int));
    
            var first_nameParameter = first_name != null ?
                new ObjectParameter("first_name", first_name) :
                new ObjectParameter("first_name", typeof(string));
    
            var last_nameParameter = last_name != null ?
                new ObjectParameter("last_name", last_name) :
                new ObjectParameter("last_name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomer", c_idParameter, first_nameParameter, last_nameParameter, emailParameter, addressParameter, cityParameter);
        }
    }
}
